package com.example.packup_podejscie_3.data.repository // Changed package

import com.example.packup_podejscie_3.data.dto.RolaUczestnikaDto
import com.example.packup_podejscie_3.domain.model.RolaUczestnika
import com.example.packup_podejscie_3.domain.repository.RolaUczestnikaRepository // Import the correct interface
import io.github.jan.supabase.postgrest.Postgrest
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.withContext
import javax.inject.Inject

class RolaUczestnikaRepositoryImpl @Inject constructor( // Changed class name
    private val postgrest: Postgrest
) : RolaUczestnikaRepository { // Implements the correct interface

    private val TABLE_NAME = "rola_uczestnika"

    override suspend fun addRolaUczestnika(rolaUczestnika: RolaUczestnika): Boolean {
        return try {
            withContext(Dispatchers.IO) {
                // Map the domain model to DTO for database insertion
                val rolaUczestnikaDto = RolaUczestnikaDto(
                    rola = rolaUczestnika.rola,
                    userId = rolaUczestnika.userId,
                    wydarzenieId = rolaUczestnika.wydarzenieId
                )
                // Insert the DTO. No need for select(Columns.ALL) as no ID is generated by DB for this model.
                postgrest.from(TABLE_NAME).insert(rolaUczestnikaDto)
                true
            }
        } catch (e: Exception) { // Catch more general Exception
            // Log the exception if needed for debugging
            e.printStackTrace()
            false // Return false on failure
        }
    }

    override fun getRoleUczestnikowForEvent(wydarzenieId: String): Flow<List<RolaUczestnika>> = flow {
        withContext(Dispatchers.IO) {
            try {
                val response = postgrest.from(TABLE_NAME).select {
                    filter {
                        // Use the column name from your DTO
                        eq("wydarzenieuuid", wydarzenieId)
                    }
                }.decodeList<RolaUczestnikaDto>() // Decode to DTO list

                // Map DTO list to domain model list
                val rolaUczestnikaList = response.map { dto ->
                    RolaUczestnika(
                        rola = dto.rola,
                        userId = dto.userId,
                        wydarzenieId = dto.wydarzenieId
                    )
                }
                emit(rolaUczestnikaList)
            } catch (e: Exception) {
                e.printStackTrace()
                emit(emptyList()) // Emit an empty list on error
            }
        }
    }

    override suspend fun getRolaUczestnika(userId: String, wydarzenieId: String): RolaUczestnika? {
        return withContext(Dispatchers.IO) {
            try {
                val response = postgrest.from(TABLE_NAME).select {
                    filter {
                        and {
                            // Use column names from your DTO
                            eq("wydarzenieuuid", wydarzenieId)
                            eq("user_id", userId)
                        }
                    }
                    limit(1) // Limit to one result as you expect a single role
                }.decodeSingleOrNull<RolaUczestnikaDto>() // Decode to DTO, allowing for null if not found

                // Map DTO to domain model
                response?.let { dto ->
                    RolaUczestnika(
                        rola = dto.rola,
                        userId = dto.userId,
                        wydarzenieId = dto.wydarzenieId
                    )
                }
            } catch (e: Exception) {
                e.printStackTrace()
                null // Return null on error or if not found
            }
        }
    }

    override suspend fun deleteRolaUczestnika(userId: String, wydarzenieId: String) {
        withContext(Dispatchers.IO) {
            try {
                postgrest.from(TABLE_NAME).delete {
                    filter {
                        and {
                            // Use column names from your DTO
                            eq("wydarzenieuuid", wydarzenieId)
                            eq("user_id", userId)
                        }
                    }
                }
            } catch (e: Exception) {
                e.printStackTrace() // Log error
                throw e // Re-throw or handle as appropriate for your error strategy
            }
        }
    }

    override suspend fun updateRolaUczestnika(rolaUczestnika: RolaUczestnika) {
        withContext(Dispatchers.IO) {
            try {
                val rolaUczestnikaDto = RolaUczestnikaDto(
                    rola = rolaUczestnika.rola,
                    userId = rolaUczestnika.userId,
                    wydarzenieId = rolaUczestnika.wydarzenieId
                )
                postgrest.from(TABLE_NAME).update(rolaUczestnikaDto) {
                    filter {
                        and {
                            // Filter by the composite key to update the specific record
                            eq("wydarzenieuuid", rolaUczestnika.wydarzenieId)
                            eq("user_id", rolaUczestnika.userId)
                        }
                    }
                }
            } catch (e: Exception) {
                e.printStackTrace() // Log error
                throw e // Re-throw or handle as appropriate for your error strategy
            }
        }
    }
}