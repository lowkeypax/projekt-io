package com.example.packup_podejscie_3.domain.repository

import com.example.packup_podejscie_3.domain.model.Wydatki // Using the domain model here
import kotlinx.coroutines.flow.Flow // Keep this if you want to observe changes in real-time or similar

interface WydatkiRepository {
    // Adds a new expense. It will return the full Wydatki object, including the ID generated by Supabase.
    suspend fun addWydatek(wydatek: Wydatki): Wydatki

    // Updates an existing expense. The 'wydatek' object must contain its 'id'.
    suspend fun updateWydatek(wydatek: Wydatki)

    // Deletes an expense by its unique ID. This is more robust than deleting by multiple fields.
    suspend fun deleteWydatek(wydatekId: String)

    // Gets a single expense by its unique ID.
    suspend fun getWydatekById(id: String): Wydatki?

    // Gets all expenses for a specific event. Using Flow for potential real-time updates or just observing changes.
    fun getWydatkiForEvent(eventId: String): Flow<List<Wydatki>>

    // If you still need a specific query for a single expense by multiple fields, you can keep this.
    // However, after adding 'id' to the database, querying by 'id' is generally preferred for uniqueness.
    // suspend fun getWydatek(nazwaPrzedmiotu: String, wydarzenieId: String, userId: String): Wydatki?
}